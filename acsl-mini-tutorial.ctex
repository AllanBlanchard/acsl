\documentclass{report}
\usepackage[utf8]{inputenc}
\usepackage[a4paper=true,pdftex,colorlinks=true,urlcolor=blue,pdfstartview=FitH]{hyperref}

\usepackage[T1]{fontenc}
\usepackage{times}
\usepackage{amssymb}
\usepackage{graphicx}
%\usepackage{tikz}
\usepackage{color}
\usepackage{xspace}
\usepackage{makeidx}
%\usepackage{ulem}
\usepackage[leftbars]{changebar}
\usepackage{alltt}
\usepackage{hevea}
\input{./macros}

\htmlprefix{ACSL Tutorial: }

\setlength{\textheight}{240mm}
\setlength{\topmargin}{-10mm}
\setlength{\textwidth}{160mm}
\setlength{\oddsidemargin}{0mm}
\setlength{\evensidemargin}{0mm}

\renewcommand{\textfraction}{0.01}
\renewcommand{\topfraction}{0.99}
\renewcommand{\bottomfraction}{0.99}

\usepackage{fancyhdr}
\pagestyle{fancyplain}
\renewcommand{\footrulewidth}{0.4pt}
\addtolength{\headheight}{2pt}
\addtolength{\headwidth}{1cm}
\renewcommand{\chaptermark}[1]{\markboth{#1}{}}
\renewcommand{\sectionmark}[1]{\markright{\thesection\ #1}}
\lhead[\fancyplain{}{\bfseries\thepage}]{\fancyplain{}{\bfseries\rightmark}}
\chead{}
\rhead[\fancyplain{}{\bfseries\leftmark}]{\fancyplain{}{\bfseries\thepage}}
\lfoot{\fancyplain{}{ACSL tutorial}}
\cfoot{}
\rfoot{}

\ifhevea%
\makeatletter%
\renewenvironment{document}{%
\@end{document}%
\@atbegindocument%
\@restartoutput\unskip%
\@print{<#def title>ACSL Tutorial</#def>
<#def meta><meta name="GENERATOR" content="hevea }%
\@getprint{\usebox{\@heveaversion}}\@print{"></#def>
<#head>
}%
\usebox{\@toplinks}\usebox{\@linkstext}%
\cutdef*[\thecuttingdepth]{\cuttingunit}%
\renewcommand{\addstyle}[1]{\hva@warn{\addstyle{} must be used in document preamble}}%
\@open@par%Open first paragraph
}{%
\@clearstyle\@footnoteflush{\@footnotelevel}\cutend*\title@flush@hook%
\@atenddocument%
\@final@footer%
\@clearstyle%
\@print{<#foot>}%
\@raise@enddocument}%
\makeatother%
\fi

\begin{document}
\sloppy
\begin{latexonly}
\hbadness=10000
\end{latexonly}
\begin{titlepage}
\begin{center}
\begin{latexonly}
\includegraphics[height=14mm]{cealistlogo.jpg}
\hfill
\includegraphics[height=14mm]{inriasaclaylogo.png}

\vfill
\end{latexonly}
%\includegraphics[height=60mm]{FramaC.jpg}
~

\vspace{20mm}

{\Huge\bfseries ACSL Mini-Tutorial}
\begin{latexonly}
\bigskip

\vspace{20mm}

{Virgile Prevosto$^1$}

\medskip

\begin{tabular}{l}
$^1$ CEA LIST, Software Security Laboratory, Saclay, F-91191 \\
\end{tabular}

\vfill

\begin{flushleft}
  This work has been partially supported by the CAT ANR project
  (ANR-05-RNTL-0030x) and by the FP6 European project Open TC.
\end{flushleft}
\end{latexonly}
\end{center}
\end{titlepage}

\clearpage

\chapter{Foreword}\cutname{acsl_tutorial_intro.html}
This document is a brief introduction to the ANSI/ISO C Specification
Language (ACSL). ACSL allows to formally specify the properties of a C
program, in order to be able to formally verify that the implementation
respects these properties. This verification is done \textit{via}
tools that are able to take into account ACSL annotations attached to
the C code. This tutorial focuses on the most important ACSL constructs
and gives an
intuitive grasp of their semantics, through short and illustrative
examples of C code annotated with ACSL formulas. A complete reference
of the ACSL language can be found in~\cite{ACSLref}. ACSL is inspired
from the specification language used by Caduceus~\cite{caduceus},
which is itself derived from the Java Modeling Language (JML, see~\cite{JML}).

\chapter{A First ACSL Example}\cutname{acsl_tutorial_first_example.html}
\label{chap:first-example}
The most important ACSL concept is the \textit{function
  contract}. A function contract for a C
function \verb+f+  is a set of
requirements over the arguments of
\verb+f+  and/or a set of properties
that are ensured at the end of the function.
The formula that expresses the requirements is called a {\em pre-condition},
whereas the formula that expresses the properties ensured when \verb|f|
returns is a {\em post-condition}.
Together, these conditions form a
contract between \verb+f+ and its callers: each caller must guarantee
that the pre-condition holds before calling \verb+f+. In exchange, \verb+f+
guarantees that the post-condition holds when it returns.

Let us consider the example of the \texttt{max} function. Informally, its
specification can be expressed this way: the function \texttt{max} takes two
\verb+int+ as arguments, and returns the greatest one. Let us see how
this can be expressed in ACSL:

\begin{c}[max-tut.c]
/*@ ensures \result >= x && \result >= y;
    ensures \result == x || \result == y;
*/
int max (int x, int y) { return (x > y) ? x : y; }
\end{c}

As can be seen above, ACSL annotations are written in special C
comments, the difference with plain comments being that annotations
begin with '\verb+/*@+'. It is also possible to
write one-line annotations introduced by '\verb+//@+'. The function
contract is written immediately above the function declaration.
In this example, the contract contains only post-conditions
(\verb+ensures+ clauses),
as \verb+max+ does not have any particular requirement.
%We could have
%added as a pre-condition the always-true formula, with the
%\verb+requires \true;+ clause, but this is not mandatory.
%Less trival \verb+requires+ clauses will be illustrated in the next examples.
The first \verb+ensures+ clause expresses the fact that the result
of \verb+max+ is greater than both \verb+x+ and \verb+y+, the arguments of
\verb+max+. The second clause mandates that the result is equal to either
\verb+x+ or \verb+y+. Since both clauses must hold, our ACSL
specification indeed expresses that the result of \texttt{max} is
the greatest of its two arguments.

It should be noted already that
there is an intuitive demarcation between ``complete'' and ``partial''
specifications. The above specification for \verb|max| can be thought
of as ``complete'', meaning that any function that satisfies the
specification should be deemed a satisfactory implementation for \verb|max|.
Partial specifications on the other hand express some of the properties that
are expected to hold for any implementation, but satisfying them is
not sufficient for an implementation to be satisfactory. Generally speaking,
partial formal specifications are the most likely to be encountered in
practice for real-life examples, complemented by informal specifications.
For instance, the above specification for \verb|max| is in fact
partial, for reasons that will become clearer later.

\chapter{Pointers and Arrays}\cutname{acsl_tutorial_pointer.html}
Now that we have specified a \verb+max+ function, we can use it to extract the
maximal value found in a sequence of \verb+int+s. A first step is to
write the prototype of the corresponding function with its
specification.

\section{Basic Specification}
\label{basic_max_seq}

\begin{c}[max_seq-tut.c]
/*@ requires n > 0;
    requires \valid(p+ (0..n-1));
    ensures \forall int i; 0 <= i <= n-1 ==> \result >= p[i];
    ensures \exists int e; 0 <= e <= n-1 && \result == p[e];
*/
int max_seq(int* p, int n);
\end{c}

The function takes two arguments: a pointer \verb+p+ to the block containing
the \verb+int+s, and the number \verb+n+ of elements in the
sequence. This time, there are pre-conditions on these
arguments. First, it is not possible to compute the maximal value of an empty
sequence, and so \verb+n+ must be positive. Moreover, the block
pointed to by \verb+p+ must contain at least \verb+n+ elements. In
other words, \verb+p[0]+, \verb+p[1]+, ... \verb+p[n-1]+ must all be
valid memory accesses. This is what the second \verb+requires+ clause expresses.

The two \verb+ensures+ clauses display some similarities with
the contract of the \verb+max+ function above: the result
is greater than or equal to every value in the sequence, and there exists
an index for which the equality is attained. Note that the formulas in
the post-condition only make sense under the assumption that the
pre-condition holds: the validity condition ensures that it makes
sense to speak about \verb+p[i]+, and if \verb+n+ could be \verb+0+,
it would not be possible
to find an index where \verb+\result+ is attained.

\section{Advanced specification}
\noindent\emph{Note: This section can be skipped on a first reading}

In addition, a more advanced ACSL construction allows to provide a shorter
specification of \verb+max_seq+: \verb+\max+ is a built-in constructor
(together with \verb+\min+, \verb+\sum+, and a few others), that returns
the maximal value taken by a function in an interval of integers.
With \verb+\max+ and the \verb+\lambda+ construction to write
functions as first-class expressions, our specification becomes:
\begin{c}[max_seq2-tut.c]
/*@ requires n > 0 &&\valid(p + (0..n-1));
    ensures \result == \max(0,n-1,\lambda integer i; p[i]);
*/
int max_seq(int* p, int n);
\end{c}

\section{Implementation}

The implementation of the \verb+max_seq+ function is pretty
straightforward. For instance, we can use the following code.

\begin{c}[max_seq-tut.c,max_seq2-tut.c,max_seq_old-tut.c,max_seq_old2-tut.c,max_seq_assigns-tut.c]
int max_seq(int* p, int n) {
  int res = *p;
  for(int i = 0; i < n; i++) {
    if (res < *p) { res = *p; }
    p++;
  }
  return res;
}
\end{c}
The specification we have given in the preceding section
defines an expected behavior for the function \verb+max_seq+.
We will see later in this document that actually verifying
that the function \verb+max_seq+ implements the specification
from the preceding section may require additional work.

\chapter{Assigns clauses}\cutname{acsl_tutorial_assigns.html}

The reader is invited at this point to pause and ponder the following
important question: is the above specification of the function \verb|max_seq|
a complete or partial one?

It may seem complete, because it takes great care in making
sure that \verb|n| is positive, and all the pointer accesses valid, and
it defines completely the expected result as the mathematical maximum
of the pointed values.
Still, there is a loophole that would allow a function to
implement this specification by the letter without being
what the specifier probably expected. Indeed, an implementation for
\verb|max_seq| could zero all the locations
\verb|p[0]|,\verb|p[1]|,\ldots,\verb|p[n-1]|, return zero,
and would still satisfy the post-conditions in the specification from
section \ref{basic_max_seq}.

The loophole is that the post-condition constrains the result of the function
to be the maximum of the pointed values {\em at the time the function
{\tt max\_seq} returns}. We should have specified that we expected
the returned result to be the maximum of the pointed values as they
were when the function was called. This can be written:


\begin{c}[max_seq_old-tut.c]
/*@ requires n > 0;
    requires \valid(p+ (0..n-1));
    ensures \forall int i; 0 <= i <= n-1 ==> \result >= \old(p[i]);
    ensures \exists int e; 0 <= e <= n-1 && \result == \old(p[e]);
*/
int max_seq(int* p, int n);
\end{c}

The \verb+\old+ keyword does exactly what we intended: instead of
evaluating \verb+p[i]+ and \verb+p[e]+ at the time the function
returns, these expressions evaluate to the value they had when the
function was called.
Better yet, we should have expressed that we did not expect
\verb|max_seq| to modify any variable in memory other that its
locals, and in particular not \verb|p[0]|,\verb|p[1]|,\ldots,\verb|p[n-1]|.
The latter condition can be expressed in an additional post-condition,
using the \verb+\old+ construct that was just introduced:

\begin{c}[max_seq_old2-tut.c]
/*@ requires n > 0;
    requires \valid(p+ (0..n-1));
    ensures \forall int i; 0 <= i <= n-1 ==> p[i] == \old(p[i]);
    ensures \forall int i; 0 <= i <= n-1 ==> \result >= p[i];
    ensures \exists int e; 0 <= e <= n-1 && \result == p[e];
*/
int max_seq(int* p, int n);
\end{c}

Note that in the other two post-conditions, \verb+\old+ is not needed
anymore, since the first post-condition guarantees that the locations
pointed to by \verb+p+ are not modified by the \verb+max_seq+ function.

It would be possible, but tedious, to use the same approach to
specify that global variables do not change during the execution
of \verb|max_seq|.
The ACSL language provides a special clause to specify that a
function is not allowed to change memory locations other than
the ones explicitly listed. This clause is the \verb+assigns+ clause,
and it is part of the function contract. When no \verb|assigns| clauses
are specified, the function is allowed to modify every visible variable.
In presence of such clauses,
the function can only modify the content of the locations
that are explicitly mentioned in these clauses. In our case, we do not
expect \verb+max_seq+ to have any visible side-effect, so that the contract
becomes:
\begin{c}[max_seq_assigns-tut.c,max_seq_inv-tut.c,max_seq_ghost-tut.c]
/*@ requires n > 0;
    requires \valid(p+ (0..n-1));
    assigns \nothing;
    ensures \forall int i; 0 <= i <= n-1 ==> \result >= p[i];
    ensures \exists int e; 0 <= e <= n-1 && \result == p[e];
*/
int max_seq(int* p, int n);
\end{c}
Again, it is not necessary to use \verb+\old+ for the values of
the expressions \verb+p[i]+ and \verb+p[e]+ in the the post-conditions,
since the specification forces them to stay unchanged during the execution of
\verb+max_seq+.

An example of a function with a non-empty \verb|assign| clause is the
swap function below, which exchange the content of two pointers to integers.
\begin{c}[swap-tut.c]
/*@
requires \valid(p) && \valid(q);
assigns *p, *q;
*/
void swap (int *p, int *q) { int tmp = *p; *p=*q; *q = tmp; return; }
\end{c}

The specification of the \verb|swap| function given above is partial.
Transforming it into a complete
specification by adding a post-condition is left as an exercise for the reader.

\chapter{Termination}\cutname{acsl_tutorial_termination.html}

There is yet another property that is implicitely expected from
a satisfactory implementation of \verb|max_seq|. Namely,
this function, when called with arguments that satisfy its pre-conditions,
should eventually terminate (and return a result that satisfies
its post-conditions). The \verb|assigns| clause in itself
only guarantees that each time the function terminates, only the
specified locations may have been modified. Similarly, the
post-conditions only apply when the function terminates, and so
a function that never terminates would for instance satisfy the
\verb|assigns| and \verb|ensures| parts of the specification
for \verb|max_seq|. The termination of the function is a separate
property that can be specified in its contract using the
\verb|terminates| clause.

Because in practice many functions are implicitely expected to terminate,
the default in ACSL is to expect functions to terminate in all the contexts
that satisfy their pre-conditions. It is possible to relax a particular
function's specification by providing a formula that describes
the conditions in which the function is guaranteed to terminate.
An implementation is then allowed not to terminate when it is called
in contexts that do not satisfy this condition.

In the following example, the function \verb|f| can be called with
any argument \verb|c|, but the function is not guaranteed to terminate
if \verb|c<=0|.
\begin{c}[non_terminating-tut.c]
/*@
assigns \nothing;
terminates c>0;
*/
void f (int c) { while(!c); return;}
\end{c}

Another valid contract for the same implementation of \verb|f| is
the following one, where the function implicitely guarantees to terminate
whenever it is called, but expects to be called only with
non-zero arguments.
\begin{c}[non_terminating2-tut.c]
/*@
requires c!=0;
assigns \nothing;
*/
void f (int c) { while(!c); return;}
\end{c}

\chapter{Behaviors}\cutname{acsl_tutorial_behavior.html}
The functions that we have seen so far had a quite simple
specification. In particular, their post-conditions were simple
relations. Specifications may be more complicated. Take for instance
the following \verb|extremum| function, which computes either the
maximum or the minimum of its \verb|int| arguments depending on the
\verb|kind| which is passed to it:

\begin{c}[extremum-tut.c,extremum2-tut.c]
typedef enum { Max, Min } kind;
int extremum (kind k, int x, int y) {
  return ((k == Max ? x > y : x < y) ? x: y);
}
\end{c}

What could be a complete specification of \verb|extremum|? First, we
should require that \verb|k| is either \verb|Max| or \verb|Min|. Then,
as for \verb|max|, the result is either \verb|x| or \verb|y|. More
precisely, if \verb|k| is equal to \verb|Max| then the result is the
greatest one, and if \verb|k| is equal to \verb|Min|, then the result
is the smallest one. All of this can be summed up in the following
ACSL contract:

\begin{c}[extremum-tut.c]
/*@ requires k == Max || k == Min;
    assigns \nothing;
    ensures \result == x || \result == y;
    ensures k == Max ==> \result >= x && \result >= y;
    ensures k == Min ==> \result <= x && \result <= y;
*/
int extremum (kind k, int x, int y);
\end{c}

However, this might not be the clearest way to express this
specification. Namely, we would like to say that \verb|extremum| has
two distinct modes of operation. These are called \emph{behaviors} in
ACSL. A function can have several behaviors in addition to a general
specification. A behavior can have additional \verb|assigns| and
\verb|ensures| clauses, but in addition, it can also have
\verb|assumes| clauses, which indicate when the behavior is triggered.

In our case, the first three clauses of the contract remain the same,
but the last two post-conditions can be expressed as two behaviors,
\verb|is_max| and \verb|is_min|, whose \verb|assume| clauses are
respectively \verb|k==Max| and \verb|k==Min|. In addition, we would
like to state that \verb|is_min| and \verb|is_max| describes
completely the set of behaviors of the function, and that they are
mutually exclusive. This is done by the \verb|complete_behaviors| and
the \verb|disjoint_behaviors| clauses respectively.
\begin{c}[extremum2-tut.c]
/*@ requires k == Max || k == Min;
    assigns \nothing;
    ensures \result == x || \result == y;
    behavior is_max:
      assumes k == Max;
      ensures \result >= x && \result >= y;
    behavior is_min:
      assumes k == Min;
      ensures \result <= x && \result <= y;
    complete behaviors is_max, is_min;
    disjoint behaviors is_max, is_min;
*/
int extremum (kind k, int x, int y);
\end{c}

\chapter{Predicates and Logic Functions}
\cutname{acsl_tutorial_logic.html}

So far, we have only used logical built-ins operators and relations.
It is often needed to define new logic predicates and logic
functions. For instance, if we define (simply) linked lists as such:
\begin{c}[max_list-tut.c,type_invariant-tut.c,global_invariant-tut.c]
  typedef struct _list { int element; struct _list* next; } list;
\end{c}

there are some common properties of lists that we want to be able to
deal with in the logic. In particular, the notion of reachability (can
a given node be attained from some root through a chain of \verb|next|
fields) plays an important role. It can be defined in ACSL through the
following annotation:
\begin{c}[max_list-tut.c,type_invariant-tut.c,global_invariant-tut.c]
  /*@
  axiomatic Reachable {
    predicate reachable{L}(list* root, list* node);
    axiom root_reachable{L}: \forall list* root; reachable(root,root);
    axiom next_reachable{L}: \forall list* root, *node;
    \valid(root) && reachable(root->next, node) ==> reachable(root,node);
  }
  */
\end{c}

The notion of reachability is defined in ACSL by an
\verb|axiomatic|. Namely, an axiomatic is a block of declarations
which are tied together. In our case, we declare a binary predicate
\verb|reachable| and give two axioms which indicates under which
circumstances \verb|reachable| holds.

The \verb|{L}| notation indicates that the predicate takes as
parameter a label, which represent a memory state of the program. Indeed,
as soon as we deal with pointers or arrays, we must refer to a
particular memory state: \verb|reachable| has no absolute meaning, it
must be tied to a point of the program. In a case like this, there is no
need to explicitely instantiate the label when we use
\verb|reachable|: the memory state to which it refers will usually be
inferred from the context ({\it e.g.} for a precondition, it is the
state at the start of the function, and for a post-condition, it is
the state just before returning to the caller). More complex predicate
may relate two or more memory states, but such definitions are out of
scope in this tutorial.

The axiom \verb|root_reachable| indicates that \verb|reachable| holds
as soon as both its arguments are equal. \verb|next_reachable|
indicates that if \verb|root| is valid and \verb|node| can be proved
reachable from \verb|root->next|, then it is also reachable from
\verb|root|. Since the axiomatic ends here, these are the only ways to
prove that a \verb|node| is reachable from a \verb|root|.

Now, the \verb|reachable| predicate can be used to discriminate
between circular and
finite lists: in a finite list, we will ultimately reach
\verb|\null|;

\begin{c}[max_list-tut.c,type_invariant-tut.c,global_invariant-tut.c]
  /*@ predicate finite{L}(list* root) = reachable(root,\null); */
\end{c}

Here, it is not necessary to embed \verb|finite| in an axiomatic: no
additional axiom or other declaration is tied to it, so that we can
give its definition directly.

We can also note that \verb|finite| is also parameterized by a label
\verb|L|. In fact, it is implicitely the memory state in which
\verb|reachable| itself is evaluated. It would have been possible to
make that explicit by writing \verb|reachable{L}(root,\null)| instead,
but this is not necessary here, as \verb|L| denotes the only state in
the environment at this level.

Similarly, we can define a logical function computing the length of a
\verb|\null| terminated list. This time, we have to avoid circular
lists, since the notion of length has little meaning for them. In
order to do that, we can again use an axiomatic:

\begin{c}[max_list-tut.c,type_invariant-tut.c,global_invariant-tut.c]
  /*@ axiomatic Length {
    logic integer length{L}(list* l);

    axiom length_nil{L}: length(\null) == 0;

    axiom length_cons{L}:
        \forall list* l, integer n;
          finite(l) && \valid(l) ==>
            length(l) == length(l->next) + 1;
   }
*/
\end{c}
This way, it is possible to speak about \verb|length(l)| for any list
\verb|l|, but if \verb|l| is circular, the value of this expression
will remain undefined: the only way to prove that \verb|length(l)==n|
for a given \verb|n| is to prove first \verb|finite(l)|.

Now that we know how to define logic predicates and logic functions,
we can go back to our maximum example, this time on (finite) lists. A
possible specification for \verb|max_list| would be the following:
\begin{c}[max_list-tut.c]
  /*@
      requires \valid(root);
      assigns \nothing;
      terminates finite(root);
      ensures
       \forall list* l;
         \valid(l) && reachable(root,l) ==>
           \result >= l->element;
      ensures
       \exists list* l;
         \valid(l) && reachable(root,l) && \result == l->element;
  */
  int max_list(list* root);
\end{c}
As with arrays, we have as pre-condition that the list is non-empty.
The post-conditions are also quite similar to the ones of \verb|max_array|,
except that indices have been replaced by the reachability of the node
from the root of the list. In addition, we find a \verb|terminates|
clause, that indicates that the implementation may loop forever on
circular lists (but could choose not to, even though this would imply
an huge overhead in this setting). A possible implementation is thus
the following:
\begin{c}[max_list-tut.c]
  int max_list(list* root) {
    int max = root->element;
    while(root->next) {
      root = root -> next;
      if (root->element > max) max = root->element;
    }
    return max;
  }
\end{c}

\chapter{Data Invariants}\cutname{acsl_tutorial_invariant.html}
\noindent\textbf{This chapter can be skipped on a first reading.}

\section{Type Invariants}
The specification of the \verb|max_list| function given above is
complete, but it could be written differently. In fact, if we are
writing a program that manipulates \verb|NULL|-terminated linked
lists, a lot a function will rely on the fact that the manipulated
lists are finite. This means that each function must have a
precondition or a \verb|terminates| clause similar to the one of
\verb|max_list|, but also that the functions that build lists must
ensure (with a post-condition) that the returned list is
finite. Writing all these clauses might be tedious for a large set of
functions. Thus, ACSL provide a way to express that all the elements
of a given datatype respects some \emph{type invariants}. By default,
these invariants are \emph{weak invariants} in the ACSL sense, that
is, they must be valid at the entrance and at the exit of each
function, but can be temporarily broken inside a function's body
(provided they are restored before the function returns, or before
calling another function which relies on them). ACSL has also a notion
of \emph{strong invariant}, which must hold at every point of the
program, but they are harder to use in practice, and beyond the scope
of this tutorial.

In our \verb|list| example, we can impose that each list is finite
with the following annotation:

\begin{c}[type_invariant-tut.c,global_invariant-tut.c]
/*@ type invariant finite_list(list* root) = finite(root); */
\end{c}

The type invariant is a unary predicate. The type of its argument is
the static type to which the invariant applies (in our case pointers
to list). With this invariant, we can get rid of the \verb|terminates|
clause in the specification of \verb|max_list|, since we are
guaranteed that only finite lists will be passed to the function. Its
specification will thus be the following:
\begin{c}[type_invariant-tut.c]
  /*@
      requires \valid(root);
      assigns \nothing;
      ensures
       \forall list* l;
         \valid(l) && reachable(root,l) ==>
           \result >= l->element;
      ensures
       \exists list* l;
         \valid(l) && reachable(root,l) && \result == l->element;
  */
  int max_list(list* root);
\end{c}

\section{Global Invariants}

There is another kind of data invariant in ACSL, called
\emph{global invariant}. As indicated by its name, a global invariant
is a property of global variables that must hold at each entrance or
exit of a function (for weak invariants) or at each point of the
program (for strong invariants). For instance, suppose that we have a
global list \verb|GList| that is always non-empty and maintained in
decreasing order, so that \verb|max_list(GList)| can be replaced in
the code by \verb|if(GList) GList->element|. A possible way to express that in
ACSL is the following:

\begin{c}[global_invariant-tut.c]
/*@
axiomatic Sorted {
  predicate sorted_decreasing{L}(list* root);
  axiom sorted_nil{L}: sorted_decreasing(\null);
  axiom sorted_singleton{L}:
  \forall list* root;
     \valid(root) && root->next == \null ==> sorted_decreasing(root);
  axiom sorted_next{L}:
  \forall list* root;
     \valid(root) && \valid(root->next) &&
     root->element >= root->next->element &&
        sorted_decreasing(root->next) ==> sorted_decreasing(root);
}
*/

list* GList;

/*@ global invariant glist_sorted: sorted_decreasing(GList); */

void insert_GList(int x);
\end{c}

Because of the invariant of \verb|GList|, a partial specification of
\verb|insert_GList| is that it can assume that GList is a sorted list,
and that it must ensure that it is still the case when it
returns. A complete specification, for instance that all the
elements that were present at the entrance of the function are still
there, and that \verb|x| is present (inserted according to the
ordering since the global invariant must still hold)
can be expressed as such:
\begin{c}[global_invariant-tut.c]
/*@
axiomatic Count {
  logic integer count(int x,list* l);

  axiom count_nil: \forall int x; count(x,\null) == 0;

  axiom count_cons_head{L}:
  \forall int x,list* l;
    \valid(l) && l->element == x ==>
       count(x,l) == count(x,l->next)+1;

 axiom count_cons_tail{L}:
  \forall int x, list* l;
     \valid(l) && l->element != x ==>
        count(x,l) == count(x,l->next);
}
*/

/*@ ensures \forall int y; y != x ==>
               count(y,GList) == count(y,\old(GList));
    ensures count(x,GList) == count(x,\old(GList))+1;
*/
void insert_GList(int x);
\end{c}

\chapter{Verification activities}\cutname{acsl_tutorial_verification.html}

The preceding examples have shown us how to write the specification of
a C function in ACSL. However, at verification time,
it can be necessary to write additional annotations in the
implementation itself in order to guide the analyzers.

\section{Assertions}
The simplest form of code annotation is an \emph{assertion}. An
assertion is a property that must be verified each time the execution
reaches a given program point. Some assertions may be discharged
directly by one analyzer or another. When this happens, it means that
the analyzer has concluded that there was no possibility of the
assertion not being respected when the arguments satisfy the
function's pre-conditions. Conversely, when the analyzer is not able
to determine that an assertion always holds, it may be able to produce
a pre-condition for the function that would, if it was added to the
function's contract, ensure that the assertion was verified.

In the following example, the first assertion can be verified automatically
by many analyzers, whereas the second one can't. An analyzer may
suggest to add the pre-condition \verb|n > 0| to \verb|f|'s contract.

\begin{c}[assert-tut.c]
/*@ requires n >= 0 && n < 100;
*/
int f(int n)
{
  int tmp = 100 - n;
  //@ assert tmp > 0;
  //@ assert tmp < 100;
  return tmp;
}
\end{c}

Let us now move on to a more interesting example.
The function \verb|sqsum| below is meant to
compute the sum of the squares of the elements of an array.
As usual, we have to give some pre-conditions to ensure the validity of
the pointer accesses, and a post-condition expressing what the intended
result is:
\begin{c}[sqsum-tut.c,sqsum2-tut.c]
/*@ requires n >= 0;
    requires \valid(p+ (0..n-1));
    assigns \nothing;
    ensures \result == \sum(0,n-1,\lambda integer i; p[i]*p[i]);
*/
int sqsum(int* p, int n);
\end{c}
A possible implementation is the following:
\begin{c}[sqsum-tut.c]
int sqsum(int* p, int n) {
  int S=0, tmp;
  for(int i = 0; i < n; i++) {
    tmp = p[i] * p[i];
    S += tmp;
  }
  return S;
}
\end{c}

This implementation seems to be correct with respect to the
specification. However, this is not the case. Indeed, the
specification operates on mathematical (unbounded) \verb|integer|s,
while the C statements uses modulo arithmetic within the \verb|int| type.
If there is an overflow, the post-condition will not hold. In order
to overcome
this issue, a possible solution is to add some assertions before each
\verb|int| operation ensuring that there is no overflow. In
the annotations, the arithmetic operations \verb|+|,\verb|-|,\ldots
are the mathematical addition, substraction,\ldots
in the \verb|integer| domain. It is therefore possible to compare
their results to \verb|INT_MAX|.
%The comparison to \verb|INT_MIN| is not necessary
%here. Indeed, the first computation is a square, and for the second,
%since we have added an assertion saying that
%\verb|tmp| is non-negative (since there is no overflow, this is the
%case). we are sure that we add a non-negative value to \verb|S|.
The code with its annotations is the following:
\begin{c}[sqsum2-tut.c]
#include <limits.h>

int sqsum(int* p, int n) {
  int S=0, tmp;
  for(int i = 0; i < n; i++) {
    //@ assert p[i] * p[i] <= INT_MAX;
    tmp = p[i] * p[i];
    //@ assert tmp >= 0;
    //@ assert S + tmp <= INT_MAX;
    S += tmp;
  }
  return S;
}
\end{c}

The assertion concerning \verb|tmp| may be discharged automatically
by some analyzers, but
the other two assertions would require \verb|sqsum|'s contract
to be completed with additional pre-conditions. Ideally, the necessary
pre-conditions will be infered automatically from
the assertions by an analyzer.
Even if they are not, and if the pre-conditions need
to be written by hand, it is still useful to write
the assertions first.
In cases like this one, it is easier to get the assertions right
than the corresponding pre-conditions. Some analyzers may then
be able to check that the assertions are verified under the
pre-conditions, providing trust in the latter.

Note: to some analyzers,
checking the assertions once the corresponding pre-conditions
are provided is much easier
than infering the pre-conditions from the assertions.

\section{Loop Invariants}

Another kind of code annotations is dedicated to the analysis of loops.
The treatment of loops is a difficult part of static analysis, and
many analyzers need to be provided with hints in the form of
an {\em invariant} for each loop. A loop invariant can be seen as a
special case of assertion, which is preserved across the loop body.
If we look back to the \verb|max_seq| function, a
useful invariant for proving that the implementation satisfies the
formal specification would be that \verb+res+ contains the maximal value seen
so far.

Let us now try to formalize this invariant property.
Part of the formal invariant that we are trying to build
is that at any iteration \verb|j|, the variable \verb|res| is greater or
equal to \verb|p[0]|,\verb|p[1]|,\ldots,\verb|p[j]|.
This part of the invariant is written:
\begin{c}[max_seq_inv-tut.c]
int max_seq(int* p, int n) {
  int res = *p;
  //@ loop invariant \forall integer j; 0 <= j <= i ==> res >= *(p+j);
  for(int i = 0; i < n; i++) {
    if (res < *p) { res = *p; }
    p++;
  }
  return res;
}
\end{c}

The other part of the invariant property that should be expressed
formally is that there exists an element in
\verb|p[0]|,\verb|p[1]|,\ldots,\verb|p[n-1]| that is equal to
\verb|res|. In other words, this second part expresses that there
exists an integer \verb|e| such that \verb|0 <= e < n| and
\verb|p[e] == res|.  In order to prove the existence of such an
integer~\verb|e|, the simplest way is to keep track of the index for
which the maximal value is attained. This can be done in ACSL with
extra statements called {\em ghost code}.  Ghost code is C code
written inside \verb|//@ ghost ..| or \verb|/*@ ghost .. */|
comments. The original program must have exactly the same behavior
with and without ghost code. In other word,
ghost code must not interfere with the concrete
implementation. The variables defined and assigned in ghost code ({\em
  ghost variables}) can be used in the ACSL properties.

The complete annotated function \verb|max_seq| then becomes:

\begin{c}[max_seq_ghost-tut.c]
int max_seq(int* p, int n) {
  int res = *p;
  //@ ghost int e = 0;
  /*@ loop invariant \forall integer j; 0 <= j <= i ==> res >= p[j];
      loop invariant \valid(p+e) && p[e] == res;
  */
  for(int i = 0; i < n; i++) {
    if (res < *p) {
      res = *p;
      //@ ghost e = i;
    }
    p++;
  }
  return res;
}
\end{c}

\bibliographystyle{plain}
\bibliography{mini-biblio}

\end{document}
Local Variables:
mode: latex
ispell-local-dictionary: english
End:
